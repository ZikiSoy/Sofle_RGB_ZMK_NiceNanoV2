/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

//Encoder Support
//Alps Alpine EC11N1524402: 30 Detent, 15PPR, 2 Channel, Quadrature, 15000 Cycle

/ {
    left_encoder: encoder_left {
        compatible = "alps,ec11";
        label = "LEFT_ENCODER";
        a-gpios = <&pro_micro 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&pro_micro 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <60>;
    };

    right_encoder: encoder_right {
        compatible = "alps,ec11";
        label = "RIGHT_ENCODER";
        a-gpios = <&pro_micro 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&pro_micro 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <60>;
    };

    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&left_encoder &right_encoder>;
        triggers-per-rotation = <30>;
    };
};

/ {
    macros {
        // System and Power
        // Microphones
        // Browser Controls

        tab_right: tab_right {
            label = "TAB_RIGHT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings = <&kp LS(LG(RIGHT_BRACKET))>;
        };

        tab_left: tab_left {
            label = "TAB_LEFT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings = <&kp LG(LS(LEFT_BRACKET))>;
        };

        close_tab: close_tab {
            label = "CLOSE_TAB";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings = <&kp LG(W)>;
        };

        //Unicode Special Characters
        //Need regkey HKEY_CURRENT_USER\Control Panel\Input Method, REG_SZ EnableHexNumpad = 1
        //Symbols       
        //IPA
        //Diacritical Characters
        // Fractions
        // Operators
    };
};

//Combos, note that key listing is zero indexed
//lshift: 36
//rshift: 49

/ {
    combos {
        compatible = "zmk,combos";

        // Characters
        // Fractions
        // Operators
    };
};

// Mod Morphs, Encoder, Tap-Dances

/ {
    behaviors {
        // Mod Morph
        // RGB

        rgb_bri_sat_inc: rgb_bri_sat_inc {
            compatible = "zmk,behavior-mod-morph";
            label = "RGB_BRIGHTNESS_SATURATION_INCREASE";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_SAI>, <&rgb_ug RGB_BRI>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        rgb_bri_sat_dec: rgb_bri_sat_dec {
            compatible = "zmk,behavior-mod-morph";
            label = "RGB_BRIGHTNESS_SATURATION_DECREASE";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_SAD>, <&rgb_ug RGB_BRD>;

            mods = <(MOD_LALT|MOD_RALT)>;
        };

        rgb_inc: rgb_inc {
            compatible = "zmk,behavior-mod-morph";
            label = "RGB_INCREASE";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_HUI>, <&rgb_bri_sat_inc>;

            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL)>;
        };

        rgb_dec: rgb_dec {
            compatible = "zmk,behavior-mod-morph";
            label = "RGB_DECREASE";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_HUD>, <&rgb_bri_sat_dec>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // System Functions  

        ret_menu: ret_menu {
            compatible = "zmk,behavior-mod-morph";
            label = "RETURN_MENU";
            #binding-cells = <0>;
            bindings = <&kp RET>, <&kp K_APPLICATION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Special Characters - Capitalizations
        // Special Characters - Other
        // Encoder

        rgb_encoder: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "RGB_ENCODER";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_inc>, <&rgb_dec>;
        };

        tab_browser: tab_browser {
            compatible = "zmk,behavior-sensor-rotate";
            label = "TAB_BROWSER";
            #sensor-binding-cells = <0>;
            bindings = <&tab_left>, <&tab_right>;
        };

        // Tap Dance

        cc: cc {
            compatible = "zmk,behavior-tap-dance";
            label = "COLOR_CYCLE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&rgb_ug RGB_COLOR_HSB(0,100,20)>,
                <&rgb_ug RGB_COLOR_HSB(10,100,20)>,
                <&rgb_ug RGB_COLOR_HSB(35,100,20)>,
                <&rgb_ug RGB_COLOR_HSB(120,100,20)>,
                <&rgb_ug RGB_COLOR_HSB(240,100,20)>,
                <&rgb_ug RGB_COLOR_HSB(285,100,20)>;
        };

        td_btr: td_btr {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BLUE_TOOTH_RELEASE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp ESC>, <&bt BT_CLR>;
        };

        td_ll_l3: td_ll_l3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_LEFT_LAYER_LAYER_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&sl 0>;
        };

        td_rl_l3: td_rl_l3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_RIGHT_LAYER_LAYER_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&sl 0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                    |  6   |  7    |  8    |  9   |   0   | DEL   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                    |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // | CAPS  |  A  |  S  |  D   |  F   |  G   |                    |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |MUTE SPK|  |ClS  TAB|  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE  | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp GRAVE   &kp N1  &kp N2     &kp N3    &kp N4        &kp N5                               &kp N6     &kp N7    &kp N8     &kp N9     &kp N0    &kp DEL
&kp TAB     &kp Q   &kp W      &kp E     &kp R         &kp T                                &kp Y      &kp U     &kp I      &kp O      &kp P     &kp BSPC
&kp CAPS    &kp A   &kp S      &kp D     &kp F         &kp G                                &kp H      &kp J     &kp K      &kp L      &kp SEMI  &kp SQT
&kp LSHIFT  &kp Z   &kp X      &kp C     &kp V         &kp B      &kp C_MUTE    &close_tab  &kp N      &kp M     &kp COMMA  &kp DOT    &kp FSLH  &kp RSHFT
                    &kp LCTRL  &kp LALT  &kp LEFT_GUI  &td_ll_l3  &kp RET       &kp SPACE   &td_rl_l3  &kp RGUI  &kp RALT   &kp RCTRL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &tab_browser>;
        };

        raise_layer {
            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |    F1 |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |       |  `  |  ~  |  <   |  >   |  ?   |                   |  *   |  {    |  }    | HOME |  END  |       |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  _   |  (    |  )    |  ;   |   |   | COLOR |
            // |       |  =  |  -  |  +   |  &   |  |   |  RGB   |  |       |  ^   |  [    |  ]    |  :   |   \   | POWER |
            //               |     |      |      |      |  CODE  |  |       |      |       |       |      |

            bindings = <
&kp F1  &kp F2     &kp F3     &kp F4       &kp F5    &kp F6                                &kp F7     &kp F8    &kp F9    &kp F10    &kp F11   &kp F12
&trans  &kp GRAVE  &kp TILDE  &none        &none     &kp QMARK                             &kp ASTRK  &kp LBRC  &kp RBRC  &kp HOME   &kp END   &trans
&trans  &kp EXCL   &kp AT     &kp HASH     &kp DLLR  &kp PRCNT                             &kp UNDER  &kp LPAR  &kp RPAR  &kp SEMI   &kp PIPE  &cc
&trans  &kp EQUAL  &kp MINUS  &kp KP_PLUS  &kp AMPS  &kp PIPE   &rgb_ug RGB_TOG    &trans  &kp CARET  &kp LBKT  &kp RBKT  &kp COLON  &kp BSLH  &none
                   &trans     &trans       &trans    &none      &none              &trans  &trans     &trans    &trans    &trans
            >;

            sensor-bindings = <&rgb_encoder &inc_dec_kp PG_UP PG_DN>;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                | HUE+ |  =  |   /   |   *  |   -   | EFF+ |
            // |BRI+ | PSCR | INS  |   ↑   |   @   |   %  |                | HUE- |  7  |   8   |   9  |   +   | BKSP |
            // |BRI- | RGB  |  ←   |   ↓   |   →   |   $  |                | SAT+ |  4  |   5   |   6  |   +   | SPD+ |
            // |TASK |BT/USB|      |  PREV |  NEXT |   #  |PL/PS |  |      | SAT- |  1  |   2   |   3  | ENTER | SPD- |
            //              |      |       |       |      |      |  |      |  0   |  0  |   0   |   .  |

            bindings = <
&td_btr          &bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                              &rgb_ug RGB_HUI  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp KP_MINUS  &rgb_ug RGB_EFF
&rgb_ug RGB_BRI  &kp PSCRN        &kp INS       &kp UP        &kp AT        &kp PRCNT                                 &rgb_ug RGB_HUD  &kp N7        &kp N8         &kp N9           &kp KP_PLUS   &trans
&rgb_ug RGB_BRD  &rgb_ug RGB_TOG  &kp LEFT      &kp DOWN      &kp RIGHT     &kp DLLR                                  &rgb_ug RGB_SAI  &kp N4        &kp N5         &kp N6           &kp KP_PLUS   &rgb_ug RGB_SPI
&none            &out OUT_TOG     &trans        &kp C_PREV    &kp C_NEXT    &kp HASH      &kp C_PLAY_PAUSE    &trans  &rgb_ug RGB_SAD  &kp N1        &kp N2         &kp N3           &kp KP_ENTER  &rgb_ug RGB_SPD
                                  &trans        &trans        &trans        &trans        &trans              &trans  &kp N0           &kp N0        &kp N0         &kp DOT
            >;

            sensor-bindings = <&inc_dec_kp C_FAST_FORWARD C_REWIND &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
